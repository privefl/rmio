// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// conv_NA_float
NumericVector& conv_NA_float(NumericVector& source);
RcppExport SEXP _rmio_conv_NA_float(SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(conv_NA_float(source));
    return rcpp_result_gen;
END_RCPP
}
// extractVec
RObject extractVec(Environment BM, const NumericVector& elemInd);
RcppExport SEXP _rmio_extractVec(SEXP BMSEXP, SEXP elemIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type elemInd(elemIndSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVec(BM, elemInd));
    return rcpp_result_gen;
END_RCPP
}
// extractMat
RObject extractMat(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP _rmio_extractMat(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    rcpp_result_gen = Rcpp::wrap(extractMat(BM, rowInd, colInd));
    return rcpp_result_gen;
END_RCPP
}
// createFile
void createFile(std::string fileName, std::size_t nrow, std::size_t ncol, int type);
RcppExport SEXP _rmio_createFile(SEXP fileNameSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    createFile(fileName, nrow, ncol, type);
    return R_NilValue;
END_RCPP
}
// addColumns
void addColumns(std::string fileName, std::size_t nrow, std::size_t ncol_add, int type);
RcppExport SEXP _rmio_addColumns(SEXP fileNameSEXP, SEXP nrowSEXP, SEXP ncol_addSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ncol_add(ncol_addSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    addColumns(fileName, nrow, ncol_add, type);
    return R_NilValue;
END_RCPP
}
// replaceVecOne
void replaceVecOne(SEXP xpbm, const NumericVector& elemInd, SEXP val);
RcppExport SEXP _rmio_replaceVecOne(SEXP xpbmSEXP, SEXP elemIndSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpbm(xpbmSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type elemInd(elemIndSEXP);
    Rcpp::traits::input_parameter< SEXP >::type val(valSEXP);
    replaceVecOne(xpbm, elemInd, val);
    return R_NilValue;
END_RCPP
}
// replaceVec
void replaceVec(SEXP xpbm, const NumericVector& elemInd, SEXP vec);
RcppExport SEXP _rmio_replaceVec(SEXP xpbmSEXP, SEXP elemIndSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpbm(xpbmSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type elemInd(elemIndSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    replaceVec(xpbm, elemInd, vec);
    return R_NilValue;
END_RCPP
}
// replaceMatOne
void replaceMatOne(SEXP xpbm, const IntegerVector& rowInd, const IntegerVector& colInd, SEXP val);
RcppExport SEXP _rmio_replaceMatOne(SEXP xpbmSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpbm(xpbmSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< SEXP >::type val(valSEXP);
    replaceMatOne(xpbm, rowInd, colInd, val);
    return R_NilValue;
END_RCPP
}
// replaceMat
void replaceMat(SEXP xpbm, const IntegerVector& rowInd, const IntegerVector& colInd, SEXP mat);
RcppExport SEXP _rmio_replaceMat(SEXP xpbmSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpbm(xpbmSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    replaceMat(xpbm, rowInd, colInd, mat);
    return R_NilValue;
END_RCPP
}
// replaceDF
void replaceDF(SEXP xpbm, const IntegerVector& rowInd, const IntegerVector& colInd, const DataFrame& df);
RcppExport SEXP _rmio_replaceDF(SEXP xpbmSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpbm(xpbmSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type df(dfSEXP);
    replaceDF(xpbm, rowInd, colInd, df);
    return R_NilValue;
END_RCPP
}
// getXPtrFBM
SEXP getXPtrFBM(std::string path, std::size_t n, std::size_t m, int type);
RcppExport SEXP _rmio_getXPtrFBM(SEXP pathSEXP, SEXP nSEXP, SEXP mSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(getXPtrFBM(path, n, m, type));
    return rcpp_result_gen;
END_RCPP
}
// getXPtrFBM_RW
SEXP getXPtrFBM_RW(std::string path, std::size_t n, std::size_t m, int type);
RcppExport SEXP _rmio_getXPtrFBM_RW(SEXP pathSEXP, SEXP nSEXP, SEXP mSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(getXPtrFBM_RW(path, n, m, type));
    return rcpp_result_gen;
END_RCPP
}
// mycount1
IntegerMatrix mycount1(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& codeInd);
RcppExport SEXP _rmio_mycount1(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP codeIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type codeInd(codeIndSEXP);
    rcpp_result_gen = Rcpp::wrap(mycount1(BM, rowInd, colInd, codeInd));
    return rcpp_result_gen;
END_RCPP
}
// mycount2
IntegerMatrix mycount2(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& codeInd);
RcppExport SEXP _rmio_mycount2(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP codeIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type codeInd(codeIndSEXP);
    rcpp_result_gen = Rcpp::wrap(mycount2(BM, rowInd, colInd, codeInd));
    return rcpp_result_gen;
END_RCPP
}
// incr_FBM_mat
void incr_FBM_mat(Environment BM, const NumericMatrix& mat);
RcppExport SEXP _rmio_incr_FBM_mat(SEXP BMSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    incr_FBM_mat(BM, mat);
    return R_NilValue;
END_RCPP
}
// incr_FBM_vec
void incr_FBM_vec(Environment BM, const NumericVector& vec);
RcppExport SEXP _rmio_incr_FBM_vec(SEXP BMSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vec(vecSEXP);
    incr_FBM_vec(BM, vec);
    return R_NilValue;
END_RCPP
}
// transpose3
void transpose3(Environment BM, Environment BM2);
RcppExport SEXP _rmio_transpose3(SEXP BMSEXP, SEXP BM2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< Environment >::type BM2(BM2SEXP);
    transpose3(BM, BM2);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmio_conv_NA_float", (DL_FUNC) &_rmio_conv_NA_float, 1},
    {"_rmio_extractVec", (DL_FUNC) &_rmio_extractVec, 2},
    {"_rmio_extractMat", (DL_FUNC) &_rmio_extractMat, 3},
    {"_rmio_createFile", (DL_FUNC) &_rmio_createFile, 4},
    {"_rmio_addColumns", (DL_FUNC) &_rmio_addColumns, 4},
    {"_rmio_replaceVecOne", (DL_FUNC) &_rmio_replaceVecOne, 3},
    {"_rmio_replaceVec", (DL_FUNC) &_rmio_replaceVec, 3},
    {"_rmio_replaceMatOne", (DL_FUNC) &_rmio_replaceMatOne, 4},
    {"_rmio_replaceMat", (DL_FUNC) &_rmio_replaceMat, 4},
    {"_rmio_replaceDF", (DL_FUNC) &_rmio_replaceDF, 4},
    {"_rmio_getXPtrFBM", (DL_FUNC) &_rmio_getXPtrFBM, 4},
    {"_rmio_getXPtrFBM_RW", (DL_FUNC) &_rmio_getXPtrFBM_RW, 4},
    {"_rmio_mycount1", (DL_FUNC) &_rmio_mycount1, 4},
    {"_rmio_mycount2", (DL_FUNC) &_rmio_mycount2, 4},
    {"_rmio_incr_FBM_mat", (DL_FUNC) &_rmio_incr_FBM_mat, 2},
    {"_rmio_incr_FBM_vec", (DL_FUNC) &_rmio_incr_FBM_vec, 2},
    {"_rmio_transpose3", (DL_FUNC) &_rmio_transpose3, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
